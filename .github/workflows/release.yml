name: Create and publish a release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number to release'
        required: true
jobs:
  publish:
    name: Create and publish a release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install PlatformIO
        run: |
          python -m pip install -U platformio

      - name: Set Version in library.json
        uses: jossef/action-set-json-field@v2.1
        with:
          file: lib/esp32_config_lib/library.json
          field: version
          value: ${{ github.event.inputs.version }}

      - name: Create tag
        run: |
          git config --global user.email "buildmanager@salex.org"
          git config --global user.name "Bob the Builder"
          git add lib/esp32_config_lib/library.json
          git commit -m "updating version to ${{ github.event.inputs.version }} in library.json"
          git tag -a v${{ github.event.inputs.version }} -m "tagging version ${{ github.event.inputs.version }}"
          git push --tags

      - name: Publish library
        run: |
          pio package publish --owner salex-org --type library --notify --no-interactive lib/esp32_config_lib
        env:
          PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: |
            Release v${{ github.event.inputs.version }}
          draft: false
          prerelease: false
